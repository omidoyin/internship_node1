doctype html
html(lang="en")
  head
    title Calander
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css")
  body
    div(class="mx-auto ")
      div(class="bg-blue-800 text-white overflow-hidden shadow-lg") 
        h2(class="p-3 font-bold text-xl ") Calender
          div(class="font-bold text-xl mb-2") 
      div(class="mx-20 py-4")
        p(class="font-bold") Pick a date and time
        p(class="font-bold mt-1") Duration: 1 hour
        p(class="font-medium my-3") Your timezone: 
          span(onclick="openModal()" id="timezoneSpan" class="font-normal cursor-pointer ") please select
        hr

        div(class="flex justify-between hidden items-center mt-4 mb-2" id="switch")
          span(class="font-medium text-sm cursor-pointer") Prev week
          span(class="font-medium text-sm cursor-pointer") Next week          
        table(id="scheduleTable" class="hidden mb-4 mt-0 w-full")
          thead
            tr(class="table-fixed bg-gray-100 h-20")
              th 
                span(class="block") Monday
                span(class="block font-normal") June 29
              th 
                span(class="block") Tuesday
                span(class="block font-normal") June 29
              th 
                span(class="block") Wednesday
                span(class="block font-normal") June 29
              th 
                span(class="block") Thursday
                span(class="block font-normal") June 29
              th 
                span(class="block") Friday
                span(class="block font-normal") June 29
              th 
                span(class="block") saturday
                span(class="block font-normal") June 29
              th 
                span(class="block") Sunday
                span(class="block font-normal") June 29
          tbody
            tr(onclick="showForm()" class="h-16")
              td(class="text-center") 11:30am
              td(class="text-center") 11:30am
              td(class="text-center") 11:30am
              td(class="text-center") 11:30am
              td(class="text-center") 11:30am
              td(class="text-center") 11:30am
              td(class="text-center") 11:30am
 
        form(id="scheduleForm" class="hidden my-4 w-full" onsubmit="return handleSubmit(event)")
          h1(class="font-bold mt-10 mb-2") Additional information
          h2(class="font-medium mt-2 mb-1") Full Name
          input(type="text", class="w-3/4 border border-black p-1 mb-2 border-2", placeholder="Full Name" required)
          h2(class="font-medium mt-2 mb-1") Email
          input(type="text", class="w-3/4 border border-black p-1 mb-2 border-2", placeholder="Email" required)
          h2(class="font-medium mt-2 mb-1") Company
          input(type="text", class="w-3/4 border border-black p-1 mb-2 border-2", placeholder="Company" required)
          h2(class="font-medium mt-2 mb-1") Phone
          input(type="text", class="w-3/4 border border-black p-1 mb-2 border-2", placeholder="Phone" required)
          h2(class="font-medium mt-2 mb-1") Your Notes
          textarea(name="", cols="20", rows="5" class="w-3/4 border border-black p-1 mb-4 border-2" required)
          button(type="submit" class="px-4 mt-3 block py-2 bg-blue-800 text-white rounded") Done

        div(id="thanks" class="hidden")
          h2 Thanks for filling in the form. You will be emailed next steps.

        div(id="myModal" class="hidden fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex items-center justify-center")
          div(class="bg-white p-8 rounded-lg w-1/2 h-2/3 relative")
            div(class="flex items-center justify-between")
              h1(class="font-bold") Timezone
              div(class="flex items-center mr-2 mb-1")
                label(class="mr-1") AM /
                label(class="mr-1 mr-1") PM
                input(type="checkbox" id="ampmToggle" class="toggle-input mr-1")
                label(for="ampmToggle" class="toggle-switch ml-1") 24hrs
            div(id="timezoneCardList" class="flex w-full h-full flex-wrap overflow-auto") 

    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.32/moment-timezone-with-data.min.js"></script>
    script.   
      function openModal() {
        const cardList = document.getElementById("timezoneCardList");
        const groupedTimezones = groupTimezonesByRegion(moment.tz.names());
        for (const [region, timezones] of Object.entries(groupedTimezones)) {
          // Create a card for each region
          const card = document.createElement("div");
          card.classList.add("bg-white", "shadow-lg", "m-5", "p-5", "overflow-auto", "w-2/5", "no-scollbar");

          // Add the region as the card title
          const cardTitle = document.createElement("h3");
          cardTitle.textContent = region;
          card.appendChild(cardTitle);

          // Create a form for the radio buttons
          const timezoneForm = document.createElement("form");

          // Add each timezone as a radio button
          timezones.slice(0, 5).forEach((timezone, index) => {
            const radioInput = document.createElement("input");
            radioInput.type = "radio";
            radioInput.name = `timezone-${region}`;
            radioInput.value = timezone;
            radioInput.id = `timezone-${region}-${index}`;
            radioInput.addEventListener("click", () => showTimezone(timezone)); 


            const label = document.createElement("label");
            label.setAttribute("for", `timezone-${region}-${index}`);
            label.textContent = timezone;

            const listItem = document.createElement("div");
            listItem.classList.add("my-2");

            listItem.appendChild(radioInput);
            listItem.appendChild(label);
            
            timezoneForm.appendChild(listItem);
          });

          // Add the timezone form to the card
          card.appendChild(timezoneForm);

          // Add the card to the card list
          cardList.appendChild(card);
        }

        document.getElementById("switch").classList.remove("hidden");        
        document.getElementById("myModal").classList.remove("hidden");
      }

      function closeModal() {
        document.getElementById("switch").classList.add("hidden");
        document.getElementById("myModal").classList.add("hidden");
      }

      function handleSubmit(event) {
        event.preventDefault()
        document.getElementById("scheduleForm").classList.add("hidden");
        document.getElementById("thanks").classList.remove("hidden");
      }


        async function generateScheduleTable(currentDate) {
        const tableBody = document.getElementById("scheduleTable");
        if (tableBody) {
          const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
          const timeSlots = generateTimeSlots(9, 17); 
          tableBody.innerHTML = '';
          const headerRow = document.createElement('tr');
          headerRow.classList.add("table-fixed", "bg-gray-100", "h-20");
          const response = await fetch('http://localhost:3000/schedule');
          let data = await response.json();
          data = data?.data
          data?.slice(0, 7).forEach(day => {
            const dayCell = document.createElement('th');
            const dayText = document.createElement('span');
            const dateText = document.createElement('span');

            dayText.classList.add("block");
            dayText.innerText = day.day;
            const d = new Date(day.date).toLocaleDateString('en-US', { month: 'long', day: 'numeric' });
            dateText.classList.add("block", "font-normal");
            dateText.innerText = d;
            dayCell.appendChild(dayText);
            dayCell.appendChild(dateText);
            headerRow.appendChild(dayCell);
          });

          tableBody.appendChild(headerRow);

          timeSlots.forEach(time => {
            const row = document.createElement('tr');
            row.classList.add("h-16");
            row.onclick = showForm2;
            data?.slice(0, 7).forEach(day => {
              const cell = document.createElement('td');
              cell.classList.add("text-center", "cursor-pointer");
              cell.innerText = `${time} ${getMeridiem(time)}`; // You can use a function to get AM/PM
              row.appendChild(cell);
            });

            tableBody.appendChild(row);
          });
          
          // Create time slot rows
          //- timeSlots.forEach(time => {
          //-   const row = document.createElement('tr');
          //-   row.classList.add("h-16");
          //-   row.onclick = showForm2;
          //-   daysOfWeek.forEach(day => {
          //-     const cell = document.createElement('td');
          //-     cell.classList.add("text-center", "cursor-pointer");
          //-     cell.innerText = `${time} ${getMeridiem(time)}`; // You can use a function to get AM/PM
          //-     row.appendChild(cell);
          //-   });

          //-   tableBody.appendChild(row);
          //- });
        } else {
          console.error("Table body not found.");
        }
      }

      // Helper function to generate an array of time slots
      function generateTimeSlots(startHour, endHour) {
        const timeSlots = [];
        for (let hour = startHour; hour <= endHour; hour++) {
          for (let minute of ["00", "15", "30", "45"]) {
            timeSlots.push(`${hour}:${minute}`);
          }
        }
        return timeSlots;
      }

      // Helper function to group timezones by region
      function groupTimezonesByRegion(timezones) {
        const groupedTimezones = {};

        timezones.forEach(timezone => {
          const [region] = timezone.split('/');
          if (!groupedTimezones[region]) {
            groupedTimezones[region] = [];
          }
          groupedTimezones[region].push(timezone);
        });

        return groupedTimezones;
      }

      // Helper function to get AM/PM
      function getMeridiem(time) {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 12 ? "PM" : "AM";
      }
 
      function showForm() {
        const table = document.getElementById("scheduleTable");
        const form = document.getElementById("scheduleForm");

        if (table.classList.contains("hidden")) {
          table.classList.remove("hidden");
          form.classList.add("hidden");
          const currentDate = new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric' });
          // Call the function to generate the schedule table
          generateScheduleTable(currentDate);
        } else {

        }    
      }

      function showForm2() {
        const table = document.getElementById("scheduleTable");
        const form = document.getElementById("scheduleForm");
        table.classList.add("hidden");
        form.classList.remove("hidden");
      }

      function showTimezone(selectedTimezone) {
        const currentTime = new Date().toLocaleTimeString('en-US', {
            timeZone: selectedTimezone,
            hour: 'numeric',
            minute: 'numeric',
            hour12: true,
          });

        // Display the generated timezone information in the modal
        const timezoneDisplay = `${selectedTimezone}: ${currentTime}`;
        showForm()
        document.getElementById("timezoneSpan").innerText = timezoneDisplay;
        closeModal()
      }
    